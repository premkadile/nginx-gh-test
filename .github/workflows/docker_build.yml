name: Docker build and push to ECR
on:
  push: 
    branches: [ fargate ]

env:                
  ECR_REPOSITORY: nginx_puma_fargate                      
  ECS_CLUSTER: hpd_fargate                 
  ECS_TASK_DEFINITION: hpd_fargate                                           
  CONTAINER_NAME: nginx

jobs:
  build:
    name: SSL build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: ssl generate
        run: |
            sudo apt-get install openssl -y
            sudo openssl req -new -newkey rsa:4096 -days 36500 -nodes -x509 \
              -subj "/C=US/ST=CA/L=SF/O=SPIRE/CN=spirehealth.com" \
              -keyout spirehealth.com.key  -out spirehealth.com.cert   
      - name: LS
        run: ls -R
      - name: Temporarily save key artifact
        uses: actions/upload-artifact@v2
        with:
          name: spirehealth.com.key
          path: build
          retention-days: 1

      - name: Temporarily save cert artifact
        uses: actions/upload-artifact@v2
        with:
          name: spirehealth.com.crt
          path: build
          retention-days: 1       

jobs:
  docker-build-push-sandbox:
    name: "Sandbox"
    runs-on: ubuntu-latest
    steps:

    - name: Check out code
      uses: actions/checkout@v2
    
    # - name: Configure AWS credentials
    #   uses: aws-actions/configure-aws-credentials@v1
    #   with:
    #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     aws-region: us-east-1

    # - name: Login to Amazon ECR
    #   id: login-ecr
    #   uses: aws-actions/amazon-ecr-login@v1

    # - name: Creating ssl certificates
    #   run: |
    #     sudo apt-get install openssl -y
    #     sudo mkdir ssl
    #     sudo cd ssl
    #     sudo openssl req -new -newkey rsa:4096 -days 36500 -nodes -x509 \
    #       -subj "/C=US/ST=CA/L=SF/O=SPIRE/CN=spirehealth.com" \
    #       -keyout spirehealth.com.key  -out spirehealth.com.cert   

    - name: Retrieve saved key artifact
      uses: actions/download-artifact@v2
      with:
        name: spirehealth.com.key
        path: build 

    - name: Retrieve saved cert artifact
      uses: actions/download-artifact@v2
      with:
        name: spirehealth.com.crt
        path: build

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
        IMAGE_TAG: nginx_https
      run: |
        sudo docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    # - name: Fill in the new image ID in the Amazon ECS task definition
    #   id: task-def
    #   uses: aws-actions/amazon-ecs-render-task-definition@97587c9d45a4930bf0e3da8dd2feb2a463cf4a3a
    #   with:
    #     task-definition: ${{ env.ECS_TASK_DEFINITION }}
    #     container-name: ${{ env.CONTAINER_NAME }}
    #     image: ${{ steps.build-image.outputs.image }}

    # - name: Deploy Amazon ECS task definition
    #   uses: aws-actions/amazon-ecs-deploy-task-definition@de0132cf8cdedb79975c6d42b77eb7ea193cf28e
    #   with:
    #     task-definition: ${{ steps.task-def.outputs.task-definition }}
    #     service: spire-hpd-fargate-sandbox
    #     cluster: ${{ env.ECS_CLUSTER }}
    #     wait-for-service-stability: true    
